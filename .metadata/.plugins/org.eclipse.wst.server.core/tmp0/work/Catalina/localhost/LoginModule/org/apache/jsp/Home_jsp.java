/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.0.27
 * Generated at: 2024-10-19 15:12:43 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class Home_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<TITLE> New Document </TITLE>\r\n");
      out.write("\r\n");
      out.write("  <META NAME=\"Generator\" CONTENT=\"EditPlus\">\r\n");
      out.write("\r\n");
      out.write("  <META NAME=\"Author\" CONTENT=\"\">\r\n");
      out.write("\r\n");
      out.write("  <META NAME=\"Keywords\" CONTENT=\"\">\r\n");
      out.write("\r\n");
      out.write("  <META NAME=\"Description\" CONTENT=\"\">\r\n");
      out.write("  \r\n");
      out.write("  <link rel=\"stylesheet\" href=\"Home.css\">\r\n");
      out.write("\r\n");
      out.write("   <style>\r\n");
      out.write("\r\n");
      out.write("  html, body {\r\n");
      out.write("\r\n");
      out.write("  height: 100%;\r\n");
      out.write("\r\n");
      out.write("  padding: 0;\r\n");
      out.write("\r\n");
      out.write("  margin: 0;\r\n");
      out.write("\r\n");
      out.write("  background: #000;\r\n");
      out.write("\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("canvas {\r\n");
      out.write("\r\n");
      out.write("  position: absolute;\r\n");
      out.write("\r\n");
      out.write("  width: 100%;\r\n");
      out.write("\r\n");
      out.write("  height: 100%;\r\n");
      out.write("\r\n");
      out.write("}\r\n");
      out.write("`</style>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("	<section style=\"display: flex;\r\n");
      out.write("  justify-content: center;\r\n");
      out.write("  align-items: center;\r\n");
      out.write("  height: 100vh;\" class = \"infopage\">\r\n");
      out.write("    <div>\r\n");
      out.write("    	<form action=\"infoPage\">\r\n");
      out.write("    		<button >Click me !!!</button>\r\n");
      out.write("    	</form>\r\n");
      out.write("    </div>\r\n");
      out.write("  </section>\r\n");
      out.write("  \r\n");
      out.write("  \r\n");
      out.write("	<canvas id=\"pinkboard\"></canvas>\r\n");
      out.write("\r\n");
      out.write("  <script>\r\n");
      out.write("\r\n");
      out.write("  /*\r\n");
      out.write("\r\n");
      out.write(" * Settings\r\n");
      out.write("\r\n");
      out.write(" */\r\n");
      out.write("\r\n");
      out.write("var settings = {\r\n");
      out.write("\r\n");
      out.write("  particles: {\r\n");
      out.write("\r\n");
      out.write("    length:   500, // maximum amount of particles\r\n");
      out.write("\r\n");
      out.write("    duration:   2, // particle duration in sec\r\n");
      out.write("\r\n");
      out.write("    velocity: 100, // particle velocity in pixels/sec\r\n");
      out.write("\r\n");
      out.write("    effect: -0.75, // play with this for a nice effect\r\n");
      out.write("\r\n");
      out.write("    size:      30, // particle size in pixels\r\n");
      out.write("\r\n");
      out.write("  },\r\n");
      out.write("\r\n");
      out.write("};\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("/*\r\n");
      out.write("\r\n");
      out.write(" * RequestAnimationFrame polyfill by Erik MÃ¶ller\r\n");
      out.write("\r\n");
      out.write(" */\r\n");
      out.write("\r\n");
      out.write("(function(){var b=0;var c=[\"ms\",\"moz\",\"webkit\",\"o\"];for(var a=0;a<c.length&&!window.requestAnimationFrame;++a){window.requestAnimationFrame=window[c[a]+\"RequestAnimationFrame\"];window.cancelAnimationFrame=window[c[a]+\"CancelAnimationFrame\"]||window[c[a]+\"CancelRequestAnimationFrame\"]}if(!window.requestAnimationFrame){window.requestAnimationFrame=function(h,e){var d=new Date().getTime();var f=Math.max(0,16-(d-b));var g=window.setTimeout(function(){h(d+f)},f);b=d+f;return g}}if(!window.cancelAnimationFrame){window.cancelAnimationFrame=function(d){clearTimeout(d)}}}());\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("/*\r\n");
      out.write("\r\n");
      out.write(" * Point class\r\n");
      out.write("\r\n");
      out.write(" */\r\n");
      out.write("\r\n");
      out.write("var Point = (function() {\r\n");
      out.write("\r\n");
      out.write("  function Point(x, y) {\r\n");
      out.write("\r\n");
      out.write("    this.x = (typeof x !== 'undefined') ? x : 0;\r\n");
      out.write("\r\n");
      out.write("    this.y = (typeof y !== 'undefined') ? y : 0;\r\n");
      out.write("\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Point.prototype.clone = function() {\r\n");
      out.write("\r\n");
      out.write("    return new Point(this.x, this.y);\r\n");
      out.write("\r\n");
      out.write("  };\r\n");
      out.write("\r\n");
      out.write("  Point.prototype.length = function(length) {\r\n");
      out.write("\r\n");
      out.write("    if (typeof length == 'undefined')\r\n");
      out.write("\r\n");
      out.write("      return Math.sqrt(this.x * this.x + this.y * this.y);\r\n");
      out.write("\r\n");
      out.write("    this.normalize();\r\n");
      out.write("\r\n");
      out.write("    this.x *= length;\r\n");
      out.write("\r\n");
      out.write("    this.y *= length;\r\n");
      out.write("\r\n");
      out.write("    return this;\r\n");
      out.write("\r\n");
      out.write("  };\r\n");
      out.write("\r\n");
      out.write("  Point.prototype.normalize = function() {\r\n");
      out.write("\r\n");
      out.write("    var length = this.length();\r\n");
      out.write("\r\n");
      out.write("    this.x /= length;\r\n");
      out.write("\r\n");
      out.write("    this.y /= length;\r\n");
      out.write("\r\n");
      out.write("    return this;\r\n");
      out.write("\r\n");
      out.write("  };\r\n");
      out.write("\r\n");
      out.write("  return Point;\r\n");
      out.write("\r\n");
      out.write("})();\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("/*\r\n");
      out.write("\r\n");
      out.write(" * Particle class\r\n");
      out.write("\r\n");
      out.write(" */\r\n");
      out.write("\r\n");
      out.write("var Particle = (function() {\r\n");
      out.write("\r\n");
      out.write("  function Particle() {\r\n");
      out.write("\r\n");
      out.write("    this.position = new Point();\r\n");
      out.write("\r\n");
      out.write("    this.velocity = new Point();\r\n");
      out.write("\r\n");
      out.write("    this.acceleration = new Point();\r\n");
      out.write("\r\n");
      out.write("    this.age = 0;\r\n");
      out.write("\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Particle.prototype.initialize = function(x, y, dx, dy) {\r\n");
      out.write("\r\n");
      out.write("    this.position.x = x;\r\n");
      out.write("\r\n");
      out.write("    this.position.y = y;\r\n");
      out.write("\r\n");
      out.write("    this.velocity.x = dx;\r\n");
      out.write("\r\n");
      out.write("    this.velocity.y = dy;\r\n");
      out.write("\r\n");
      out.write("    this.acceleration.x = dx * settings.particles.effect;\r\n");
      out.write("\r\n");
      out.write("    this.acceleration.y = dy * settings.particles.effect;\r\n");
      out.write("\r\n");
      out.write("    this.age = 0;\r\n");
      out.write("\r\n");
      out.write("  };\r\n");
      out.write("\r\n");
      out.write("  Particle.prototype.update = function(deltaTime) {\r\n");
      out.write("\r\n");
      out.write("    this.position.x += this.velocity.x * deltaTime;\r\n");
      out.write("\r\n");
      out.write("    this.position.y += this.velocity.y * deltaTime;\r\n");
      out.write("\r\n");
      out.write("    this.velocity.x += this.acceleration.x * deltaTime;\r\n");
      out.write("\r\n");
      out.write("    this.velocity.y += this.acceleration.y * deltaTime;\r\n");
      out.write("\r\n");
      out.write("    this.age += deltaTime;\r\n");
      out.write("\r\n");
      out.write("  };\r\n");
      out.write("\r\n");
      out.write("  Particle.prototype.draw = function(context, image) {\r\n");
      out.write("\r\n");
      out.write("    function ease(t) {\r\n");
      out.write("\r\n");
      out.write("      return (--t) * t * t + 1;\r\n");
      out.write("\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    var size = image.width * ease(this.age / settings.particles.duration);\r\n");
      out.write("\r\n");
      out.write("    context.globalAlpha = 1 - this.age / settings.particles.duration;\r\n");
      out.write("\r\n");
      out.write("    context.drawImage(image, this.position.x - size / 2, this.position.y - size / 2, size, size);\r\n");
      out.write("\r\n");
      out.write("  };\r\n");
      out.write("\r\n");
      out.write("  return Particle;\r\n");
      out.write("\r\n");
      out.write("})();\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("/*\r\n");
      out.write("\r\n");
      out.write(" * ParticlePool class\r\n");
      out.write("\r\n");
      out.write(" */\r\n");
      out.write("\r\n");
      out.write("var ParticlePool = (function() {\r\n");
      out.write("\r\n");
      out.write("  var particles,\r\n");
      out.write("\r\n");
      out.write("      firstActive = 0,\r\n");
      out.write("\r\n");
      out.write("      firstFree   = 0,\r\n");
      out.write("\r\n");
      out.write("      duration    = settings.particles.duration;\r\n");
      out.write("\r\n");
      out.write(" \r\n");
      out.write("\r\n");
      out.write("  function ParticlePool(length) {\r\n");
      out.write("\r\n");
      out.write("    // create and populate particle pool\r\n");
      out.write("\r\n");
      out.write("    particles = new Array(length);\r\n");
      out.write("\r\n");
      out.write("    for (var i = 0; i < particles.length; i++)\r\n");
      out.write("\r\n");
      out.write("      particles[i] = new Particle();\r\n");
      out.write("\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  ParticlePool.prototype.add = function(x, y, dx, dy) {\r\n");
      out.write("\r\n");
      out.write("    particles[firstFree].initialize(x, y, dx, dy);\r\n");
      out.write("\r\n");
      out.write("   \r\n");
      out.write("\r\n");
      out.write("    // handle circular queue\r\n");
      out.write("\r\n");
      out.write("    firstFree++;\r\n");
      out.write("\r\n");
      out.write("    if (firstFree   == particles.length) firstFree   = 0;\r\n");
      out.write("\r\n");
      out.write("    if (firstActive == firstFree       ) firstActive++;\r\n");
      out.write("\r\n");
      out.write("    if (firstActive == particles.length) firstActive = 0;\r\n");
      out.write("\r\n");
      out.write("  };\r\n");
      out.write("\r\n");
      out.write("  ParticlePool.prototype.update = function(deltaTime) {\r\n");
      out.write("\r\n");
      out.write("    var i;\r\n");
      out.write("\r\n");
      out.write("   \r\n");
      out.write("\r\n");
      out.write("    // update active particles\r\n");
      out.write("\r\n");
      out.write("    if (firstActive < firstFree) {\r\n");
      out.write("\r\n");
      out.write("      for (i = firstActive; i < firstFree; i++)\r\n");
      out.write("\r\n");
      out.write("        particles[i].update(deltaTime);\r\n");
      out.write("\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    if (firstFree < firstActive) {\r\n");
      out.write("\r\n");
      out.write("      for (i = firstActive; i < particles.length; i++)\r\n");
      out.write("\r\n");
      out.write("        particles[i].update(deltaTime);\r\n");
      out.write("\r\n");
      out.write("      for (i = 0; i < firstFree; i++)\r\n");
      out.write("\r\n");
      out.write("        particles[i].update(deltaTime);\r\n");
      out.write("\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("   \r\n");
      out.write("\r\n");
      out.write("    // remove inactive particles\r\n");
      out.write("\r\n");
      out.write("    while (particles[firstActive].age >= duration && firstActive != firstFree) {\r\n");
      out.write("\r\n");
      out.write("      firstActive++;\r\n");
      out.write("\r\n");
      out.write("      if (firstActive == particles.length) firstActive = 0;\r\n");
      out.write("\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("   \r\n");
      out.write("\r\n");
      out.write("   \r\n");
      out.write("\r\n");
      out.write("  };\r\n");
      out.write("\r\n");
      out.write("  ParticlePool.prototype.draw = function(context, image) {\r\n");
      out.write("\r\n");
      out.write("    // draw active particles\r\n");
      out.write("\r\n");
      out.write("    if (firstActive < firstFree) {\r\n");
      out.write("\r\n");
      out.write("      for (i = firstActive; i < firstFree; i++)\r\n");
      out.write("\r\n");
      out.write("        particles[i].draw(context, image);\r\n");
      out.write("\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    if (firstFree < firstActive) {\r\n");
      out.write("\r\n");
      out.write("      for (i = firstActive; i < particles.length; i++)\r\n");
      out.write("\r\n");
      out.write("        particles[i].draw(context, image);\r\n");
      out.write("\r\n");
      out.write("      for (i = 0; i < firstFree; i++)\r\n");
      out.write("\r\n");
      out.write("        particles[i].draw(context, image);\r\n");
      out.write("\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("  };\r\n");
      out.write("\r\n");
      out.write("  return ParticlePool;\r\n");
      out.write("\r\n");
      out.write("})();\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("/*\r\n");
      out.write("\r\n");
      out.write(" * Putting it all together\r\n");
      out.write("\r\n");
      out.write(" */\r\n");
      out.write("\r\n");
      out.write("(function(canvas) {\r\n");
      out.write("\r\n");
      out.write("  var context = canvas.getContext('2d'),\r\n");
      out.write("\r\n");
      out.write("      particles = new ParticlePool(settings.particles.length),\r\n");
      out.write("\r\n");
      out.write("      particleRate = settings.particles.length / settings.particles.duration, // particles/sec\r\n");
      out.write("\r\n");
      out.write("      time;\r\n");
      out.write("\r\n");
      out.write(" \r\n");
      out.write("\r\n");
      out.write("  // get point on heart with -PI <= t <= PI\r\n");
      out.write("\r\n");
      out.write("  function pointOnHeart(t) {\r\n");
      out.write("\r\n");
      out.write("    return new Point(\r\n");
      out.write("\r\n");
      out.write("      160 * Math.pow(Math.sin(t), 3),\r\n");
      out.write("\r\n");
      out.write("      130 * Math.cos(t) - 50 * Math.cos(2 * t) - 20 * Math.cos(3 * t) - 10 * Math.cos(4 * t) + 25\r\n");
      out.write("\r\n");
      out.write("    );\r\n");
      out.write("\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write(" \r\n");
      out.write("\r\n");
      out.write("  // creating the particle image using a dummy canvas\r\n");
      out.write("\r\n");
      out.write("  var image = (function() {\r\n");
      out.write("\r\n");
      out.write("    var canvas  = document.createElement('canvas'),\r\n");
      out.write("\r\n");
      out.write("        context = canvas.getContext('2d');\r\n");
      out.write("\r\n");
      out.write("    canvas.width  = settings.particles.size;\r\n");
      out.write("\r\n");
      out.write("    canvas.height = settings.particles.size;\r\n");
      out.write("\r\n");
      out.write("    // helper function to create the path\r\n");
      out.write("\r\n");
      out.write("    function to(t) {\r\n");
      out.write("\r\n");
      out.write("      var point = pointOnHeart(t);\r\n");
      out.write("\r\n");
      out.write("      point.x = settings.particles.size / 2 + point.x * settings.particles.size / 350;\r\n");
      out.write("\r\n");
      out.write("      point.y = settings.particles.size / 2 - point.y * settings.particles.size / 350;\r\n");
      out.write("\r\n");
      out.write("      return point;\r\n");
      out.write("\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    // create the path\r\n");
      out.write("\r\n");
      out.write("    context.beginPath();\r\n");
      out.write("\r\n");
      out.write("    var t = -Math.PI;\r\n");
      out.write("\r\n");
      out.write("    var point = to(t);\r\n");
      out.write("\r\n");
      out.write("    context.moveTo(point.x, point.y);\r\n");
      out.write("\r\n");
      out.write("    while (t < Math.PI) {\r\n");
      out.write("\r\n");
      out.write("      t += 0.01; // baby steps!\r\n");
      out.write("\r\n");
      out.write("      point = to(t);\r\n");
      out.write("\r\n");
      out.write("      context.lineTo(point.x, point.y);\r\n");
      out.write("\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    context.closePath();\r\n");
      out.write("\r\n");
      out.write("    // create the fill\r\n");
      out.write("\r\n");
      out.write("    context.fillStyle = '#ea80b0';\r\n");
      out.write("\r\n");
      out.write("    context.fill();\r\n");
      out.write("\r\n");
      out.write("    // create the image\r\n");
      out.write("\r\n");
      out.write("    var image = new Image();\r\n");
      out.write("\r\n");
      out.write("    image.src = canvas.toDataURL();\r\n");
      out.write("\r\n");
      out.write("    return image;\r\n");
      out.write("\r\n");
      out.write("  })();\r\n");
      out.write("\r\n");
      out.write(" \r\n");
      out.write("\r\n");
      out.write("  // render that thing!\r\n");
      out.write("\r\n");
      out.write("  function render() {\r\n");
      out.write("\r\n");
      out.write("    // next animation frame\r\n");
      out.write("\r\n");
      out.write("    requestAnimationFrame(render);\r\n");
      out.write("\r\n");
      out.write("   \r\n");
      out.write("\r\n");
      out.write("    // update time\r\n");
      out.write("\r\n");
      out.write("    var newTime   = new Date().getTime() / 1000,\r\n");
      out.write("\r\n");
      out.write("        deltaTime = newTime - (time || newTime);\r\n");
      out.write("\r\n");
      out.write("    time = newTime;\r\n");
      out.write("\r\n");
      out.write("   \r\n");
      out.write("\r\n");
      out.write("    // clear canvas\r\n");
      out.write("\r\n");
      out.write("    context.clearRect(0, 0, canvas.width, canvas.height);\r\n");
      out.write("\r\n");
      out.write("   \r\n");
      out.write("\r\n");
      out.write("    // create new particles\r\n");
      out.write("\r\n");
      out.write("    var amount = particleRate * deltaTime;\r\n");
      out.write("\r\n");
      out.write("    for (var i = 0; i < amount; i++) {\r\n");
      out.write("\r\n");
      out.write("      var pos = pointOnHeart(Math.PI - 2 * Math.PI * Math.random());\r\n");
      out.write("\r\n");
      out.write("      var dir = pos.clone().length(settings.particles.velocity);\r\n");
      out.write("\r\n");
      out.write("      particles.add(canvas.width / 2 + pos.x, canvas.height / 2 - pos.y, dir.x, -dir.y);\r\n");
      out.write("\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("   \r\n");
      out.write("\r\n");
      out.write("    // update and draw particles\r\n");
      out.write("\r\n");
      out.write("    particles.update(deltaTime);\r\n");
      out.write("\r\n");
      out.write("    particles.draw(context, image);\r\n");
      out.write("\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write(" \r\n");
      out.write("\r\n");
      out.write("  // handle (re-)sizing of the canvas\r\n");
      out.write("\r\n");
      out.write("  function onResize() {\r\n");
      out.write("\r\n");
      out.write("    canvas.width  = canvas.clientWidth;\r\n");
      out.write("\r\n");
      out.write("    canvas.height = canvas.clientHeight;\r\n");
      out.write("\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  window.onresize = onResize;\r\n");
      out.write("\r\n");
      out.write(" \r\n");
      out.write("\r\n");
      out.write("  // delay rendering bootstrap\r\n");
      out.write("\r\n");
      out.write("  setTimeout(function() {\r\n");
      out.write("\r\n");
      out.write("    onResize();\r\n");
      out.write("\r\n");
      out.write("    render();\r\n");
      out.write("\r\n");
      out.write("  }, 10);\r\n");
      out.write("\r\n");
      out.write("})(document.getElementById('pinkboard'));\r\n");
      out.write("\r\n");
      out.write("  </script>\r\n");
      out.write("\r\n");
      out.write("   \r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
